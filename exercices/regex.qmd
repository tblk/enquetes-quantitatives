---
title: "Expressions régulières"
date: 2024-11-06
---

# Introduction

Dans cet exercice, nous allons explorer les **expressions régulières** en utilisant le package {{< var stringr >}}. Les expressions régulières permettent de manipuler, chercher, et extraire des motifs spécifiques dans des chaînes de caractères.

Nous travaillerons en deux parties :

1. **Briques élémentaires** : Nous allons apprendre 12 éléments de base en expressions régulières.
2. **Exercices de composition** : Vous appliquerez ces briques élémentaires pour résoudre des problèmes plus complexes.

Pour chaque exercice, utilisez la fonction `stringr::str_view()` pour visualiser les correspondances dans les chaînes de caractères.

# Briques élémentaires

## Caractère de début de ligne : `^`

L'opérateur `^` permet de trouver un motif qui commence en début de chaîne.

```r
library(stringr)
str_view("Bonjour le monde", "^Bonjour")
```

**À faire** : Appliquez ce motif à la chaîne suivante : `"Bonjour à tous"`

## Caractère de fin de ligne : `$`

Le caractère `$` trouve un motif qui se trouve à la fin de la chaîne.

```r
str_view("C'est la fin", "fin$")
```

**À faire** : Appliquez ce motif à `"Voici la fin de l'histoire"`

## 3. Un chiffre : `\d`

Le motif `\d` correspond à n'importe quel chiffre (0 à 9).

```r
str_view("Il y a 2 chats", "\d")
```

**À faire** : Appliquez ce motif à `"Il reste 4 places"`

## Un caractère alphanumérique : `\w`

Le motif `\w` correspond à un caractère alphanumérique (lettres ou chiffres).

```r
str_view("abc123", "\w")
```

**À faire** : Appliquez ce motif à `"123abc"`

## N'importe quel caractère : `.` (point)

Le point `.` correspond à n'importe quel caractère sauf le saut de ligne.

```r
str_view("A..C", "A..C")
```

**À faire** : Appliquez ce motif à `"D..F"`

## Espace blanc : `\s`

Le motif `\s` capture les espaces, tabulations, ou retours à la ligne.

```r
str_view("Salut tout le monde", "\s")
```

**À faire** : Appliquez ce motif à `"Bonjour à tous"`

## Un groupe de caractères : `[abc]`

Les crochets permettent de rechercher un seul caractère parmi un groupe.

```r
str_view("abeille", "[aeiou]")
```

**À faire** : Appliquez ce motif à `"ordinateur"`

## Exclusion de caractères : `[^abc]`

Avec `[^...]`, on peut exclure des caractères spécifiques.

```r
str_view("bonjour", "[^aeiou]")
```

**À faire** : Appliquez ce motif à `"salutations"`

## 9. Répétition de zéro ou plusieurs fois : `*`

Le symbole `*` permet de chercher un motif qui se répète zéro ou plusieurs fois.

```r
str_view("aaab", "a*")
```

**À faire** : Appliquez ce motif à `"bbb"`

## Répétition d'une ou plusieurs fois : `+`

Le symbole `+` permet de chercher un motif qui se répète une ou plusieurs fois.

```r
str_view("abcabc", "ab+")
```

**À faire** : Appliquez ce motif à `"aaaaa"`

## Répétition d'exactement N fois : `{N}`

Le symbole `{N}` recherche un motif qui se répète exactement N fois.

```r
str_view("10000", "0{4}")
```

**À faire** : Appliquez ce motif à `"111000"`

## Caractère littéral : `\`
Pour utiliser un caractère littéral comme `.` ou `*`, on utilise `\`.

```r
str_view("3.1415", "\.")
```

**À faire** : Appliquez ce motif à `"v1.0"`

# Exercices de composition

1. Trouvez une chaîne qui commence par "Bonjour" et finit par "monde".
2. Trouvez les séquences de deux chiffres dans la chaîne `"Année 2021, code 42"`.
3. Identifiez les mots de trois lettres dans `"un deux trois quatre cinq"`.
4. Extrayez les chiffres à la fin de `"Mon code postal est 75001"`.
5. Recherchez toute séquence commençant par une lettre et suivie d'un chiffre dans `"A1, B2, C3"`.
6. Repérez les groupes de caractères sans voyelles dans `"sky cry dry"`.
7. Identifiez les mots qui commencent par "b" et ont au moins deux "o" dans `"bob, boost, book"`.
8. Cherchez toutes les séquences de chiffres consécutifs d'au moins trois chiffres dans `"123 45 6789 101"`.
9. Identifiez les mots terminant par "ing" dans `"running, singing, jump"`.
10. Repérez les séquences qui alternent voyelles et consonnes dans `"eureka, zebra, data"`.
