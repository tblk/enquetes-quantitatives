---
title: "Élections législatives"
date: 2024-12-18
categories: "Niveau 3"
---

# Préparation

Je charge uniquement les packages principaux.

```{r}
#| message: false
library(tidyverse)
library(sf)
```

Je télécharge les données directement depuis R. La fonction `multi_download` du package `curl` est adaptée au téléchargement de fichiers lourds ou multiples. La fonction de base correspondante est `download.file`. Je les télécharge dans le sous-dossier `data` de mon projet à l'aide de la fonction `here::here`.

```{r}
#| eval: false
curl::multi_download("https://static.data.gouv.fr/resources/elections-legislatives-des-30-juin-et-7-juillet-2024-resultats-definitifs-du-1er-tour/20240711-075030/resultats-definitifs-par-communes.xlsx",
                     destfiles = here::here("data", "legislatives-2024-communes.xlsx"))
```

Le jeu de données rassemble les résultats du *premier tour* des élections législatives de 2024 au niveau *communal*.

```{r}
#| message: false
#| warning: false
d0 = readxl::read_excel(here::here("data", "legislatives-2024-communes.xlsx")) |> 
  janitor::clean_names()
```

# Recodages 

Notre base de données contient autant de lignes que de communes. Et de très nombreuses variables, car le jeu de données est au format *wide*. Autrement dit, pour chaque commune, il y a une colonne pour chaque attribut de chaque candidat.

```{r}
nrow(d0)
ncol(d0)
```

Je sélectionne les variables donnant les informations générales (nombre d'inscrits, de votants, de votes nuls, blancs, d'abstentions et pourcentages correspondants). Il s'agit des 18 premières variables, et je peux donc passer à `select` l'argument `1:18`.

```{r}
d1 = d0 |> 
  select(1:18)
```

Un premier problème apparaît : les variables exprimées en pourcentage sont de type `character`, car elles contiennent le symbole `%`. Pas très pratique pour faire des calculs. 

```{r}
glimpse(d1)
```

On va donc convertir toutes ces variables au format `numeric`. Ce serait fastidieux de le faire pour chacune d'entre elle, on utilise donc la fonction `across`.

:::{.callout-tip}
Testez la fonction `parse_number` sur des chaînes de caractères contenant des nombres et regardez le résultat.
:::

```{r}
d2 = d1 |> 
  mutate(
    across(
      starts_with("percent_"),
      ~parse_number(.x, locale = locale(decimal_mark = ","))
           )
    )
```

# Inspection

La fonction `skim` du package [skimr](https://docs.ropensci.org/skimr/) permet d'inspecter rapidement les différentes variables du jeu de données. C'est très utile pour détecter des problèmes. En l'occurrence, si l'on cherche uniquement d'éventuelles valeurs manquantes introduites lors des opérations précédentes, on peut utiliser la fonction suivante :

```{r}
questionr::freq.na(d2)
```

On constate que nos opérations sur les variables en pourcentage se sont bien déroulées, elles n'ont pas introduit de non-réponse. Par contre, il y a visiblement un problème avec deux autres variables. Isolons les lignes qui contiennent une valeur manquante pour `code_commune` et `code_departement`. Il s'avèrent que ce sont toutes des (et toutes les) communes corses.

```{r}
d2 |> 
  filter(is.na(code_commune))
```

:::{.callout-caution}
### Problème classique à l'importation
Pour gagner du temps, les fonctions dédiées à l'importation, comme `readxl::read_excel` ou `readr::read_csv` essaient de *deviner* le type des variables à partir des premières lignes qu'elles lisent. Par défaut, il s'agit des 1000 premières lignes. La plupart du temps, cela fonctionne. Mais avec les codes des communes, il y a très souvent un problème. Les 1000 premiers codes sont numériques, donc `read_excel` assigne à la variable `code_commune` le type `numeric`. Arrivée en Corse, la fonction rencontre des codes qui contiennent les symboles "A" et "B". Impossible de les lire comme `numeric`, par conséquent ces valeurs se verront assigner la valeur `NA` (pour *Not Available*). Deux solutions existent : soit expliciter le type des variables, soit augmenter le nombre de lignes que la fonction doit lire avant de déterminer le type des variables. Comme la base de données est relativement petite, on peut ici choisir la seconde option, qui correspond à l'argument `guess_max` de `read_excel`.
:::

# Rectifier

On reprend ici les étapes précédentes, sauf qu'on réalise correctement l'importation.

```{r}
legislatives_2024_t1 = readxl::read_excel(here::here("data", "legislatives-2024-communes.xlsx"),
                                          guess_max = 35000) |> 
  janitor::clean_names() |> 
  select(1:18) |> 
  mutate(
    across(
      starts_with("percent_"),
      ~parse_number(.x, locale = locale(decimal_mark = ","))
      ))
```

# Couche géographique

À l'aide du package [CARTElette](https://antuki.github.io/CARTElette/articles/CARTElette.html), on télécharge les contours des communes pour l'année 2024 dans un sous-dossier `data` de notre projet. 

:::{.callout-caution}
Ce ligne de code n'est évidemment à exécuter *qu'une seule fois*. N'oubliez pas de la commenter (#) pour ne pas télécharger les données à chaque fois que vous relancez votre script.
:::

```{r}
#| eval: false
CARTElette::charger_carte(destfile = here::here("data"),
                          COG = 2024,
                          nivsupra = "COM")
```

Importons cette couche géographique. Puis sélectionnons les variables correspondant au code de la commune et du département, au nom de la commune et à sa population. Trions les observations par code géographique croissant.

```{r}
#| message: false
communes_sf = st_read(here::here("data", "COM_2024_CARTElette.shp")) |> 
  janitor::clean_names() |> 
  select(insee_dep, insee_com, nom, population) |> 
  rename(code_commune = insee_com) |> 
  arrange(code_commune)
```

# Jointure

L'objectif est de réaliser une jointure entre le dataframe des résultats électoraux, et le dataframe/objet sf contenant les contours des communes, afin de pouvoir cartographier les résultats. 

La meilleure candidate pour le rôle de **clef commune** aux deux dataframe semble être la variable `code_commune`. Seulement, deux observations montrent que cela ne sera seulement pas si simple. 

- D'abord, le dataframe commune_sf contient `r nrow(communes_sf)` lignes et le dataframe électoral `r nrow(legislatives_2024_t1)` lignes.
- Ensuite, les deux variables ne sont pas *strictement* codées de la même façon. Comparez le code de L'Abergement-Clémenciat dans les deux dataframes par exemple. 

On va d'abord recoder `code_commune` de manière à ce qu'elle soit absolument identique dans les deux dataframes, pour deux communes identiques.

:::{.callout-tip}
### Ajouter un zéro
Pour cela, il faut ajouter un zéro devant les codes du dataframe électoral qui ne contiennent que 4 chiffres, de manière à ce que, par exemple, `1001` devienne `01001`. Pour cela, on utilise, à l'intérieur de la fonction `mutate` qui nous permet de recoder une variable, 3 fonctions :
- `if_else` permet de faire du recodage *conditionnel*.
- `stringr::str_length` donne la longueur d'une chaîne de caractères.
- `paste0` permet de "coller" (sans espace) deux chaînes de caractères ensemble.
:::

```{r}
legislatives_clean = legislatives_2024_t1 |> 
  mutate(code_commune = if_else(str_length(code_commune) < 5,
                                paste0("0", code_commune),
                                code_commune))
```

Maintenant que la variable `code_commune` est rigoureusement identique dans les deux dataframes, identifions les observations (les communes) éventuellement présentes dans l'un, mais pas dans l'autre, à l'aide de la fonction `anti_join`.

D'abord, les communes qui sont dans notre fichier électoral, mais pas dans notre fichier cartographique. À part une poignée de commune métropolitaine qui ont dû apparaître dans l'intervalle entre la publication du COG 2024 et les législatives, il s'agit de collectivités d'outre-mer.

```{r}
anti_join(legislatives_clean, communes_sf)
```

Ensuite, les communes qui sont dans notre fichier géographique, mais pas dans notre fichier électoral. Qu'est-ce que ces communes ont de spécial ? Elles n'ont, tout simplement, pas d'habitants, mais sont conservées comme lieux de mémoire de la Première Guerre Mondiale. Voir ces deux articles de Wikipédia :

```{r}
#| eval: false
browseURL("https://fr.wikipedia.org/wiki/Zone_rouge_(s%C3%A9quelles_de_guerre)#Contexte_historique")
browseURL("https://fr.wikipedia.org/wiki/Villages_fran%C3%A7ais_d%C3%A9truits_durant_la_Premi%C3%A8re_Guerre_mondiale")

```

```{r}
anti_join(communes_sf, legislatives_clean)
```

Ces points éclaircis, réalisons la jointure à l'aide de la fonction `left_join`. 

```{r}
legislatives_sf = left_join(communes_sf, legislatives_clean)
```

# Absention

Vous désirez étudier le pourcentage d'abstention par commune. 
- Utilisez la fonction `summary` pour avoir une première idée de la distribution de cette variable. 
- Représentez sa distribution à l'aide des fonctions `geom_boxplot`, `geom_histogram` et `geom_density`.
- Représentez, sur un même graphe, le pourcentage de votes blancs, de votes nuls et d'absentions. Que remarquez-vous ?

:::{.callout-tip}
Vous pourrez utiliser la fonction `geom_point` et jouer avec les *scales* suivantes : `x`, `y`, `fill`.
:::

# Discrétisation

- Vu la distribution de la variable du pourcentage d'absentions, quelle distribution vous semble la plus adaptée ? 
- À l'aide de la fonction `classInt::classIntervals`, procédez à la discrétisation.

# Cartographie

- Cartographiez le pourcentage de logements vacants en utilisant ces trois fonctions : `ggplot`, `geom_sf` et `scale_fill_viridis_b`. 

- Cartographiez la distribution de l'absention en utilisant ces trois fonctions : `ggplot`, `geom_sf` et `scale_fill_viridis_b`. 

:::{.callout-caution}
# M'appeler à ce stade
Pour discuter des améliorations esthétiques à apporter.
:::